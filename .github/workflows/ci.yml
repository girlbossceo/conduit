name: CI and Artifacts

on:
  pull_request:
  push:
    branches:
      - main
      - dev

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Required to make some things output color
  TERM: ansi
  # Publishing to my nix binary cache
  ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}
  # Just in case incremental is still being set to true, speeds up CI
  CARGO_INCREMENTAL: 0
  # Custom nix binary cache if fork is being used
  ATTIC_ENDPOINT: ${{ vars.ATTIC_ENDPOINT }}
  ATTIC_PUBLIC_KEY: ${{ vars.ATTIC_PUBLIC_KEY }}

permissions:
  packages: write
  contents: read

jobs:
  tests:
    name: CI and Tests
    runs-on: ubuntu-latest

    steps:
    - name: Sync repository
      uses: actions/checkout@v4

    - name: Install Nix (with flakes and nix-command enabled)
      uses: cachix/install-nix-action@v26
      with:
        nix_path: nixpkgs=channel:nixos-unstable

        # Add `nix-community`, Crane, upstream Conduit, and conduwuit binary caches
        extra_nix_config: |
          experimental-features = nix-command flakes
          extra-substituters = https://nix-community.cachix.org
          extra-trusted-public-keys = nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
          extra-substituters = https://crane.cachix.org
          extra-trusted-public-keys = crane.cachix.org-1:8Scfpmn9w+hGdXH/Q9tTLiYAE/2dnJYRJP7kl80GuRk=
          extra-substituters = https://nix.computer.surgery/conduit
          extra-trusted-public-keys = conduit:ZGAf6P6LhNvnoJJ3Me3PRg7tlLSrPxcQ2RiE5LIppjo=
          extra-substituters = https://attic.kennel.juneis.dog/conduit
          extra-trusted-public-keys = conduit:Isq8FGyEC6FOXH6nD+BOeAA+bKp6X6UIbupSlGEPuOg=
          extra-substituters = https://attic.kennel.juneis.dog/conduwuit
          extra-trusted-public-keys = conduwuit:lYPVh7o1hLu1idH4Xt2QHaRa49WRGSAqzcfFd94aOTw=

    - name: Add alternative Nix binary caches if specified
      if: ${{ (env.ATTIC_ENDPOINT != '') && (env.ATTIC_PUBLIC_KEY != '') }}
      run: |
        echo "extra-substituters = ${{ env.ATTIC_ENDPOINT }}" >> /etc/nix/nix.conf
        echo "extra-trusted-public-keys = ${{ env.ATTIC_PUBLIC_KEY }}" >> /etc/nix/nix.conf

    - name: Pop/push Magic Nix Cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Configure `nix-direnv`
      run: |
        echo 'source $HOME/.nix-profile/share/nix-direnv/direnvrc' > "$HOME/.direnvrc"

    - name: Install `direnv` and `nix-direnv`
      run: nix-env -f "<nixpkgs>" -iA direnv -iA nix-direnv

    - name: Pop/push downloaded crate cache
      uses: actions/cache@v4
      with:
        key: downloaded-crates
        path: ~/.cargo

    - name: Pop/push compiled crate cache
      uses: actions/cache@v4
      with:
        key: compiled-crates-${{runner.os}}
        path: target

    # Do this to shorten the logs for the real CI step
    - name: Populate `/nix/store`
      run: nix develop --command true

    - name: Allow direnv
      run: direnv allow

    - name: Cache x86_64 inputs for devShell
      run: |
        ./bin/nix-build-and-cache .#devShells.x86_64-linux.default.inputDerivation


    - name: Perform continuous integration
      run: direnv exec . engage



  build-static:
    name: Static Artifacts
    runs-on: ubuntu-latest
    needs: tests
    strategy:
      max-parallel: 3
      matrix:
        target: [
          "x86_64-unknown-linux-musl",
          "x86_64-unknown-linux-musl-jemalloc",
          "aarch64-unknown-linux-musl",
          "aarch64-unknown-linux-musl-jemalloc",
          ]

    steps:
    - name: Sync repository
      uses: actions/checkout@v4

    - name: Install Nix (with flakes and nix-command enabled)
      uses: cachix/install-nix-action@v26
      with:
        nix_path: nixpkgs=channel:nixos-unstable

        # Add `nix-community`, Crane, upstream Conduit, and conduwuit binary caches
        extra_nix_config: |
          experimental-features = nix-command flakes
          extra-substituters = https://nix-community.cachix.org
          extra-trusted-public-keys = nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
          extra-substituters = https://crane.cachix.org
          extra-trusted-public-keys = crane.cachix.org-1:8Scfpmn9w+hGdXH/Q9tTLiYAE/2dnJYRJP7kl80GuRk=
          extra-substituters = https://nix.computer.surgery/conduit
          extra-trusted-public-keys = conduit:ZGAf6P6LhNvnoJJ3Me3PRg7tlLSrPxcQ2RiE5LIppjo=
          extra-substituters = https://attic.kennel.juneis.dog/conduit
          extra-trusted-public-keys = conduit:Isq8FGyEC6FOXH6nD+BOeAA+bKp6X6UIbupSlGEPuOg=
          extra-substituters = https://attic.kennel.juneis.dog/conduwuit
          extra-trusted-public-keys = conduwuit:lYPVh7o1hLu1idH4Xt2QHaRa49WRGSAqzcfFd94aOTw=

    - name: Add alternative Nix binary caches if specified
      if: ${{ (env.ATTIC_ENDPOINT != '') && (env.ATTIC_PUBLIC_KEY != '') }}
      run: |
        echo "extra-substituters = ${{ env.ATTIC_ENDPOINT }}" >> /etc/nix/nix.conf
        echo "extra-trusted-public-keys = ${{ env.ATTIC_PUBLIC_KEY }}" >> /etc/nix/nix.conf

    - name: Pop/push Magic Nix Cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Configure `nix-direnv`
      run: |
        echo 'source $HOME/.nix-profile/share/nix-direnv/direnvrc' > "$HOME/.direnvrc"

    - name: Install `direnv` and `nix-direnv`
      run: nix-env -f "<nixpkgs>" -iA direnv -iA nix-direnv

    - name: Pop/push downloaded crate cache
      uses: actions/cache@v4
      with:
        key: downloaded-crates
        path: ~/.cargo

    - name: Pop/push compiled crate cache
      uses: actions/cache@v4
      with:
        key: compiled-crates-${{runner.os}}
        path: target

    # Do this to shorten the logs for the real CI step
    - name: Populate `/nix/store`
      run: nix develop --command true

    - name: Allow direnv
      run: direnv allow

    - name: Cache x86_64 inputs for devShell
      run: |
        ./bin/nix-build-and-cache .#devShells.x86_64-linux.default.inputDerivation


    - name: Build static artifacts
      run: |
        ./bin/nix-build-and-cache .#static-${{ matrix.target }}
        mkdir -p target/release
        cp -v -f result/bin/conduit target/release
        direnv exec . cargo deb --no-build --no-strip --output target/debian/${{ matrix.target }}.deb

    - name: Upload static artifacts
      uses: actions/upload-artifact@v4
      with:
        name: static-${{ matrix.target }}
        path: result/bin/conduit
        if-no-files-found: error

    - name: Upload static deb artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}.deb
        path: target/debian/${{ matrix.target }}.deb
        if-no-files-found: error



  build-oci:
    name: OCI Artifacts and Publish
    runs-on: ubuntu-latest
    needs: tests
    strategy:
      max-parallel: 3
      matrix:
        oci-target: [
          #"x86_64-unknown-linux-gnu",
          "x86_64-unknown-linux-musl",
          "x86_64-unknown-linux-musl-jemalloc",
          "aarch64-unknown-linux-musl",
          "aarch64-unknown-linux-musl-jemalloc",
          ]

    steps:
    - name: Sync repository
      uses: actions/checkout@v4

    - name: Install Nix (with flakes and nix-command enabled)
      uses: cachix/install-nix-action@v26
      with:
        nix_path: nixpkgs=channel:nixos-unstable

        # Add `nix-community`, Crane, upstream Conduit, and conduwuit binary caches
        extra_nix_config: |
          experimental-features = nix-command flakes
          extra-substituters = https://nix-community.cachix.org
          extra-trusted-public-keys = nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
          extra-substituters = https://crane.cachix.org
          extra-trusted-public-keys = crane.cachix.org-1:8Scfpmn9w+hGdXH/Q9tTLiYAE/2dnJYRJP7kl80GuRk=
          extra-substituters = https://nix.computer.surgery/conduit
          extra-trusted-public-keys = conduit:ZGAf6P6LhNvnoJJ3Me3PRg7tlLSrPxcQ2RiE5LIppjo=
          extra-substituters = https://attic.kennel.juneis.dog/conduit
          extra-trusted-public-keys = conduit:Isq8FGyEC6FOXH6nD+BOeAA+bKp6X6UIbupSlGEPuOg=
          extra-substituters = https://attic.kennel.juneis.dog/conduwuit
          extra-trusted-public-keys = conduwuit:lYPVh7o1hLu1idH4Xt2QHaRa49WRGSAqzcfFd94aOTw=

    - name: Add alternative Nix binary caches if specified
      if: ${{ (env.ATTIC_ENDPOINT != '') && (env.ATTIC_PUBLIC_KEY != '') }}
      run: |
        echo "extra-substituters = ${{ env.ATTIC_ENDPOINT }}" >> /etc/nix/nix.conf
        echo "extra-trusted-public-keys = ${{ env.ATTIC_PUBLIC_KEY }}" >> /etc/nix/nix.conf

    - name: Pop/push Magic Nix Cache
      uses: DeterminateSystems/magic-nix-cache-action@main

    - name: Configure `nix-direnv`
      run: |
        echo 'source $HOME/.nix-profile/share/nix-direnv/direnvrc' > "$HOME/.direnvrc"

    - name: Install `direnv` and `nix-direnv`
      run: nix-env -f "<nixpkgs>" -iA direnv -iA nix-direnv

    - name: Pop/push downloaded crate cache
      uses: actions/cache@v4
      with:
        key: downloaded-crates
        path: ~/.cargo

    - name: Pop/push compiled crate cache
      uses: actions/cache@v4
      with:
        key: compiled-crates-${{runner.os}}
        path: target

    # Do this to shorten the logs for the real CI step
    - name: Populate `/nix/store`
      run: nix develop --command true

    - name: Allow direnv
      run: direnv allow

    - name: Cache x86_64 inputs for devShell
      run: |
        ./bin/nix-build-and-cache .#devShells.x86_64-linux.default.inputDerivation


    - name: Build OCI images
      run: |
        ./bin/nix-build-and-cache .#oci-image-${{ matrix.oci-target }}
        cp -v -f result oci-image-${{ matrix.oci-target }}.tar.gz

    - name: Upload OCI image artifacts
      uses: actions/upload-artifact@v4
      with:
        name: oci-image-${{ matrix.oci-target }}
        path: oci-image-${{ matrix.oci-target }}.tar.gz
        if-no-files-found: error
        # don't compress again
        compression-level: 0


    - name: Extract metadata for Dockerhub
      env:
        REGISTRY: registry.hub.docker.com
        IMAGE_NAME: ${{ github.repository }}
      id: meta-dockerhub
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Extract metadata for GitHub Container Registry
      env:
        REGISTRY: ghcr.io
        IMAGE_NAME: ${{ github.repository }}
      id: meta-ghcr
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}


    - name: Login to Dockerhub
      env:
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
      if: ${{ (github.event_name != 'pull_request') && (env.DOCKER_USERNAME != '') && (env.DOCKERHUB_TOKEN != '') }}
      uses: docker/login-action@v3
      with:
        # username is not really a secret
        username: ${{ vars.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      env:
        REGISTRY: ghcr.io
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}


    - name: Publish to Dockerhub
      env:
        IMAGE_SUFFIX_AMD64: amd64
        IMAGE_SUFFIX_ARM64V8: arm64v8
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
        TARGET_NAME: ${{ matrix.oci-target }}
        IMAGE_NAME: docker.io/${{ github.repository }}
      if: ${{ (github.event_name != 'pull_request') && (env.DOCKER_USERNAME != '') && (env.DOCKERHUB_TOKEN != '') }}
      run: |
        docker load -i oci-image-${{ matrix.oci-target }}.tar.gz
        IMAGE_ID=$(docker images -q conduit:main)
        TAG_SUFFIX=${{ matrix.oci-target }}
        TAG_SUFFIX=${TAG_SUFFIX//-jemalloc/}
        TAG_SUFFIX=${TAG_SUFFIX//unknown-linux-musl/}
        TAG_SUFFIX=${TAG_SUFFIX//aarch64/arm64v8}
        TAG_SUFFIX=${TAG_SUFFIX//x86_64/amd64}

        # Tag and push the architecture-specific images
        docker tag $IMAGE_ID $IMAGE_NAME:$GITHUB_SHA-$TAG_SUFFIX
        docker push $IMAGE_NAME:$GITHUB_SHA-$TAG_SUFFIX

        # Create and push the architecture-specific git ref
        docker manifest create $IMAGE_NAME:$GITHUB_REF_NAME --amend $IMAGE_NAME:$GITHUB_SHA-$TAG_SUFFIX
        docker manifest push $IMAGE_NAME:$GITHUB_REF_NAME

        # Tag "main" as latest (stable branch) architecture specific
        if [[ "$GITHUB_REF_NAME" == "main" ]]; then
          docker manifest create $IMAGE_NAME:latest --amend $IMAGE_NAME:$GITHUB_SHA-$TAG_SUFFIX
          docker manifest push $IMAGE_NAME:latest
        fi

    - name: Publish to GitHub Container Registry
      env:
        IMAGE_SUFFIX_AMD64: amd64
        IMAGE_SUFFIX_ARM64V8: arm64v8
        TARGET_NAME: ${{ matrix.oci-target }}
        IMAGE_NAME: ghcr.io/${{ github.repository }}
      if: github.event_name != 'pull_request'
      run: |
        docker load -i oci-image-${{ matrix.oci-target }}.tar.gz
        IMAGE_ID=$(docker images -q conduit:main)

        # Tag and push the architecture specific images
        if [[ "$TARGET_NAME" = *"x86_64"* ]]; then
          if [[ "$TARGET_NAME" = *"jemalloc"* ]]; then
            docker tag $IMAGE_ID $IMAGE_NAME:$GITHUB_SHA-jemalloc-$IMAGE_SUFFIX_AMD64
            docker push $IMAGE_NAME:$GITHUB_SHA-jemalloc-$IMAGE_SUFFIX_AMD64
          else
            docker tag $IMAGE_ID $IMAGE_NAME:$GITHUB_SHA-$IMAGE_SUFFIX_AMD64
            docker push $IMAGE_NAME:$GITHUB_SHA-$IMAGE_SUFFIX_AMD64
          fi
        elif [[ "$TARGET_NAME" = *"aarch64"* ]]; then
          if [[ "$TARGET_NAME" = *"jemalloc"* ]]; then
            docker tag $IMAGE_ID $IMAGE_NAME:$GITHUB_SHA-jemalloc-$IMAGE_SUFFIX_ARM64V8
            docker push $IMAGE_NAME:$GITHUB_SHA-jemalloc-$IMAGE_SUFFIX_ARM64V8
          else
            docker tag $IMAGE_ID $IMAGE_NAME:$GITHUB_SHA-jemalloc-$IMAGE_SUFFIX_ARM64V8
            docker push $IMAGE_NAME:$GITHUB_SHA-jemalloc-$IMAGE_SUFFIX_ARM64V8
          fi
        fi

        # Tag and push the architecture specific git ref
        if [[ "$TARGET_NAME" = *"x86_64"* ]]; then
          if [[ "$TARGET_NAME" = *"jemalloc"* ]]; then
            docker manifest create $IMAGE_NAME:$GITHUB_REF_NAME --amend $IMAGE_NAME:$GITHUB_SHA-jemalloc-$IMAGE_SUFFIX_AMD64
            docker manifest push $IMAGE_NAME:$GITHUB_REF_NAME
          else
            docker manifest create $IMAGE_NAME:$GITHUB_REF_NAME --amend $IMAGE_NAME:$GITHUB_SHA-$IMAGE_SUFFIX_AMD64
            docker manifest push $IMAGE_NAME:$GITHUB_REF_NAME
          fi
        elif [[ "$TARGET_NAME" = *"aarch64"* ]]; then
          if [[ "$TARGET_NAME" = *"jemalloc"* ]]; then
            docker manifest create $IMAGE_NAME:$GITHUB_REF_NAME --amend $IMAGE_NAME:$GITHUB_SHA-jemalloc-$IMAGE_SUFFIX_ARM64V8
            docker manifest push $IMAGE_NAME:$GITHUB_REF_NAME
          else
            docker manifest create $IMAGE_NAME:$GITHUB_REF_NAME --amend $IMAGE_NAME:$GITHUB_SHA-$IMAGE_SUFFIX_ARM64V8
            docker manifest push $IMAGE_NAME:$GITHUB_REF_NAME
          fi
        fi

        # Tag "main" as latest (stable branch) architecture specific
        if [[ "$GITHUB_REF_NAME" = "main" ]]; then
          if [[ "$TARGET_NAME" = *"x86_64"* ]]; then
            if [[ "$TARGET_NAME" = *"jemalloc"* ]]; then
              docker manifest create $IMAGE_NAME:latest --amend $IMAGE_NAME:$GITHUB_SHA-jemalloc-$IMAGE_SUFFIX_AMD64
              docker manifest push $IMAGE_NAME:latest
            else
              docker manifest create $IMAGE_NAME:latest --amend $IMAGE_NAME:$GITHUB_SHA-$IMAGE_SUFFIX_AMD64
              docker manifest push $IMAGE_NAME:latest
            fi
          elif [[ "$TARGET_NAME" = *"aarch64"* ]]; then
            if [[ "$TARGET_NAME" = *"jemalloc"* ]]; then
              docker manifest create $IMAGE_NAME:latest --amend $IMAGE_NAME:$GITHUB_SHA-jemalloc-$IMAGE_SUFFIX_ARM64V8
              docker manifest push $IMAGE_NAME:latest
            else
              docker manifest create $IMAGE_NAME:latest --amend $IMAGE_NAME:$GITHUB_SHA-$IMAGE_SUFFIX_ARM64V8
              docker manifest push $IMAGE_NAME:latest
            fi
          fi
        fi
