name: CI and Artifacts

on:
    pull_request:
    push:
        branches:
            - main
            - dev
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

env:
    # Required to make some things output color
    TERM: ansi
    # Publishing to my nix binary cache
    ATTIC_TOKEN: ${{ secrets.ATTIC_TOKEN }}
    # Just in case incremental is still being set to true, speeds up CI
    CARGO_INCREMENTAL: 0
    # Custom nix binary cache if fork is being used
    ATTIC_ENDPOINT: ${{ vars.ATTIC_ENDPOINT }}
    ATTIC_PUBLIC_KEY: ${{ vars.ATTIC_PUBLIC_KEY }}

permissions:
    packages: write
    contents: read

jobs:
    build_and_publish:
        name: Build and publish artifacts
        runs-on: ubuntu-latest
        steps:
            - name: Sync repository
              uses: actions/checkout@v4

            - name: Install Nix
              uses: DeterminateSystems/nix-installer-action@main

            - name: Enable Cachix binary cache
              run: |
                  nix-env -iA cachix -f https://cachix.org/api/v1/install
                  cachix use crane
                  cachix use nix-community

            - name: Configure Magic Nix Cache
              uses: DeterminateSystems/magic-nix-cache-action@main

            - name: Apply Nix binary cache configuration
              run: |
                  sudo tee -a /etc/nix/nix.conf > /dev/null <<EOF
                  extra-substituters = https://nix.computer.surgery/conduit https://attic.kennel.juneis.dog/conduit https://attic.kennel.juneis.dog/conduwuit
                  extra-trusted-public-keys = conduit:ZGAf6P6LhNvnoJJ3Me3PRg7tlLSrPxcQ2RiE5LIppjo= conduit:Isq8FGyEC6FOXH6nD+BOeAA+bKp6X6UIbupSlGEPuOg= conduwuit:lYPVh7o1hLu1idH4Xt2QHaRa49WRGSAqzcfFd94aOTw=
                  EOF

            - name: Use alternative Nix binary caches if specified
              if: ${{ (env.ATTIC_ENDPOINT != '') && (env.ATTIC_PUBLIC_KEY != '') }}
              run: |
                  sudo tee -a /etc/nix/nix.conf > /dev/null <<EOF
                  extra-substituters = ${{ env.ATTIC_ENDPOINT }}
                  extra-trusted-public-keys = ${{ env.ATTIC_PUBLIC_KEY }}
                  EOF
            - name: Install and activate `direnv`
              run: |
                  echo 'source $HOME/.nix-profile/share/nix-direnv/direnvrc' > "$HOME/.direnvrc"
                  nix-env -f "<nixpkgs>" -iA direnv -iA nix-direnv
                  direnv allow

            - name: Update `/nix/store`
              run: |
                  nix develop --command true

            - name: Run CI tests
              run: |
                  direnv exec . engage

            - name: Build x86_64 static with hmalloc
              run: |
                  bin/nix-build-and-cache -A static-x86_64-unknown-linux-musl --out-link target/release/static-x86_64-unknown-linux-musl
                  direnv exec . cargo deb --no-build --no-strip --output target/debian/x86_64-unknown-linux-musl.deb

            - name: Upload static-x86_64-unknown-linux-musl
              uses: actions/upload-artifact@v4
              with:
                  name: static-x86_64-unknown-linux-musl
                  path: target/release/static-x86_64-unknown-linux-musl
                  if-no-files-found: error

            - name: Upload deb x86_64-unknown-linux-musl
              uses: actions/upload-artifact@v4
              with:
                  name: x86_64-unknown-linux-musl.deb
                  path: target/debian/x86_64-unknown-linux-musl.deb
                  if-no-files-found: error

            - name: Build x86_64 static with jemalloc
              run: |
                  bin/nix-build-and-cache -A static-x86_64-unknown-linux-musl-jemalloc --out-link target/release/static-x86_64-unknown-linux-musl-jemalloc
                  direnv exec . cargo deb --no-build --no-strip --output target/debian/x86_64-unknown-linux-musl-jemalloc.deb

            - name: Upload static-x86_64-unknown-linux-musl-jemalloc
              uses: actions/upload-artifact@v4
              with:
                  name: static-x86_64-unknown-linux-musl-jemalloc
                  path: target/release/static-x86_64-unknown-linux-musl-jemalloc
                  if-no-files-found: error

            - name: Upload deb x86_64-unknown-linux-musl-jemalloc
              uses: actions/upload-artifact@v4
              with:
                  name: x86_64-unknown-linux-musl-jemalloc.deb
                  path: target/debian/x86_64-unknown-linux-musl-jemalloc.deb
                  if-no-files-found: error

            - name: Build x86_64 OCI with hmalloc
              run: |
                  bin/nix-build-and-cache -A oci-image-x86_64-unknown-linux-musl --out-link oci-image-x86_64-unknown-linux-musl.tar.gz

            - name: Build x86_64 OCI with jemalloc
              run: |
                  bin/nix-build-and-cache -A oci-image-x86_64-unknown-linux-musl-jemalloc --out-link oci-image-x86_64-unknown-linux-musl-jemalloc.tar.gz

            - name: Build aarch64 static with hmalloc
              run: |
                  bin/nix-build-and-cache -A static-aarch64-unknown-linux-musl --out-link target/release/static-aarch64-unknown-linux-musl
                  direnv exec . cargo deb --no-build --no-strip --output target/debian/aarch64-unknown-linux-musl.deb

            - name: Upload static-aarch64-unknown-linux-musl
              uses: actions/upload-artifact@v4
              with:
                  name: static-aarch64-unknown-linux-musl
                  path: target/release/static-aarch64-unknown-linux-musl
                  if-no-files-found: error

            - name: Upload deb aarch64-unknown-linux-musl
              uses: actions/upload-artifact@v4
              with:
                  name: aarch64-unknown-linux-musl.deb
                  path: target/debian/aarch64-unknown-linux-musl.deb
                  if-no-files-found: error

            - name: Build aarch64 static with jemalloc
              run: |
                  bin/nix-build-and-cache -A static-aarch64-unknown-linux-musl-jemalloc --out-link target/release/static-aarch64-unknown-linux-musl-jemalloc
                  direnv exec . cargo deb --no-build --no-strip --output target/debian/aarch64-unknown-linux-musl-jemalloc.deb

            - name: Upload static-aarch64-unknown-linux-musl-jemalloc
              uses: actions/upload-artifact@v4
              with:
                  name: static-aarch64-unknown-linux-musl-jemalloc
                  path: target/release/static-aarch64-unknown-linux-musl-jemalloc
                  if-no-files-found: error

            - name: Upload deb aarch64-unknown-linux-musl-jemalloc
              uses: actions/upload-artifact@v4
              with:
                  name: aarch64-unknown-linux-musl-jemalloc.deb
                  path: target/debian/aarch64-unknown-linux-musl-jemalloc.deb
                  if-no-files-found: error

            - name: Build aarch64 OCI with hmalloc
              run: |
                  bin/nix-build-and-cache -A oci-image-aarch64-unknown-linux-musl --out-link oci-image-aarch64-unknown-linux-musl.tar.gz

            - name: Build aarch64 OCI with jemalloc
              run: |
                  bin/nix-build-and-cache -A oci-image-aarch64-unknown-linux-musl-jemalloc --out-link oci-image-aarch64-unknown-linux-musl-jemalloc.tar.gz

            - name: Upload OCI image x86_64-unknown-linux-musl
              uses: actions/upload-artifact@v4
              with:
                  name: oci-image-x86_64-unknown-linux-musl.tar.gz
                  path: oci-image-x86_64-unknown-linux-musl.tar.gz
                  if-no-files-found: error
                  compression-level: 0

            - name: Upload OCI image x86_64-unknown-linux-musl-jemalloc
              uses: actions/upload-artifact@v4
              with:
                  name: oci-image-x86_64-unknown-linux-musl-jemalloc.tar.gz
                  path: oci-image-x86_64-unknown-linux-musl-jemalloc.tar.gz
                  if-no-files-found: error
                  compression-level: 0

            - name: Upload OCI image aarch64-unknown-linux-musl
              uses: actions/upload-artifact@v4
              with:
                  name: oci-image-aarch64-unknown-linux-musl.tar.gz
                  path: oci-image-aarch64-unknown-linux-musl.tar.gz
                  if-no-files-found: error
                  compression-level: 0

            - name: Upload OCI image aarch64-unknown-linux-musl-jemalloc
              uses: actions/upload-artifact@v4
              with:
                  name: oci-image-aarch64-unknown-linux-musl-jemalloc.tar.gz
                  path: oci-image-aarch64-unknown-linux-musl-jemalloc.tar.gz
                  if-no-files-found: error
                  compression-level: 0

            - name: Load OCI Images and tag
              run: |
                  ID_AARCH64=$(docker load -i oci-image-aarch64-unknown-linux-musl-jemalloc.tar.gz | sed -n 's/Loaded image: \(.*\)/\1/p')
                  docker tag $ID_AARCH64 conduwuit:${{ github.sha }}-aarch64-jemalloc
                  ID_X86_64=$(docker load -i oci-image-x86_64-unknown-linux-musl-jemalloc.tar.gz | sed -n 's/Loaded image: \(.*\)/\1/p')
                  docker tag $ID_X86_64 conduwuit:${{ github.sha }}-x86_64-jemalloc

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.repository_owner }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Create and push combined manifest to GitHub
              run: |
                  REPO_GHCR="ghcr.io/${{ github.repository }}"
                  SHA_TAG="${{ github.ref_name }}-${{ github.sha }}"
                  BRANCH_TAG="${{ github.ref_name }}"
                  if [ "$BRANCH_TAG" == "main" ]; then
                  BRANCH_TAG="latest"
                  fi

                  docker manifest create $REPO_GHCR:$SHA_TAG \
                  --amend conduwuit:${{ github.sha }}-x86_64-jemalloc \
                  --amend conduwuit:${{ github.sha }}-aarch64-jemalloc
                  docker manifest push $REPO_GHCR:$SHA_TAG

                  docker manifest create $REPO_GHCR:$BRANCH_TAG \
                  --amend conduwuit:${{ github.sha }}-x86_64-jemalloc \
                  --amend conduwuit:${{ github.sha }}-aarch64-jemalloc
                  docker manifest push $REPO_GHCR:$BRANCH_TAG

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              env:
                  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
                  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
              if: ${{ (env.DOCKER_USERNAME != '') && (env.DOCKERHUB_TOKEN != '') }}
              with:
                  username: ${{ env.DOCKER_USERNAME }}
                  password: ${{ env.DOCKERHUB_TOKEN }}

            - name: Create and push combined manifest to Docker Hub
              env:
                  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
                  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
              if: ${{ (env.DOCKER_USERNAME != '') && (env.DOCKERHUB_TOKEN != '') }}
              run: |
                  REPO_DOCKER="docker.io/${{ github.repository }}"
                  SHA_TAG="${{ github.ref_name }}-${{ github.sha }}"
                  BRANCH_TAG="${{ github.ref_name }}"
                  if [ "$BRANCH_TAG" == "main" ]; then
                  BRANCH_TAG="latest"
                  fi

                  docker manifest create $REPO_DOCKER:$SHA_TAG \
                  --amend conduwuit:${{ github.sha }}-x86_64-jemalloc \
                  --amend conduwuit:${{ github.sha }}-aarch64-jemalloc
                  docker manifest push $REPO_DOCKER:$SHA_TAG

                  docker manifest create $REPO_DOCKER:$BRANCH_TAG \
                  --amend conduwuit:${{ github.sha }}-x86_64-jemalloc \
                  --amend conduwuit:${{ github.sha }}-aarch64-jemalloc
                  docker manifest push $REPO_DOCKER:$BRANCH_TAG
